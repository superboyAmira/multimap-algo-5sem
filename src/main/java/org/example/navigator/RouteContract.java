package org.example.navigator;

public interface Navigator {
    void addRoute(RouteContract route); // добавляет маршрут в «Навигатор».
    void removeRoute(String routeId); // удаляет маршрут из «Навигатора».
    boolean contains(RouteContract route); //возвращает значение true, если маршрут найден.
    int size(); // возвращает общее количество маршрутов.
    RouteContract getRoute(String routeId); // возвращает маршрут по id.
    void chooseRoute(String routeId); // увеличивает популярность данного маршрута на 1.
    Iterable<RouteContract> searchRoutes(String startPoint, String endPoint);
    // возвращает все маршруты, имеющие логический смысл,
    // содержащие начальную и конечную точки.
    // Результаты следует отсортировать по расстоянию между двумя точками
    // (наименьшее количество точек между ними), а затем по популярности в порядке убывания.
    // Избранные маршруты должны стоять на первом месте, независимо от расстояния или популярности.

    Iterable<RouteContract> getFavoriteRoutes(String destinationPoint);
    // возвращает все маршруты, которые являются избранными и содержат данную точку назначения в качестве не начальной точки.
    // Результаты следует отсортировать по расстоянию в порядке возрастания, а затем по популярности в порядке убывания.
    // Если избранных маршрутов нет — вернуть пустую коллекцию.
    Iterable<RouteContract> getTop3Routes();
    // возвращает первые 5 маршрутов по популярности в порядке убывания, з
    // атем по расстоянию в порядке возрастания и затем по количеству точек местоположения в порядке возрастания.
    // Если маршрутов нет — верните пустую коллекцию.
    // Если все критерии сортировки не подходят, вам следует упорядочить данные по порядку ввода.
    // Это для всех методов с упорядоченным выводом.
}
